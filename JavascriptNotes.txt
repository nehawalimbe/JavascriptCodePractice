Array methods :-
.push() takes one or more parameters and "pushes" them onto the end of the array.
.unshift() works exactly like .push(), but instead of adding the element at the end of the array, unshift() adds the element at the beginning of the array.
.pop() is used to pop a value off of the end of an array. We can store this popped off value by assigning it to a variable. In other words, .pop() removes the last element from an array and returns that element.
That's where .shift() comes in. It works just like .pop(), except it removes the first element instead of the last.

Equality Operator :-
3 == '3' returns true because JavaScript performs type conversion from string to number. 3 === '3' returns false because the types are different and type conversion is not performed.

JavaScript has a Math.random() function that generates a random decimal number between 0 (inclusive) and 1 (exclusive). Thus Math.random() can return a 0 but never return a 1.

Generate whole Number between 0 to 19 using Math.random():-
Math.floor(Math.random() * 20);

Generate Random Whole Numbers within a Range :-
Math.floor(Math.random() * (max - min + 1)) + min;
======================================
let max = 90
let min = 85;
console.log("Getting a random number between two values =",Math.random() * (max - min) + min);

console.log("Getting a random integer between two values =", Math.floor(Math.random() * (max - min) + min));
// The maximum is exclusive and the minimum is inclusive


console.log("Getting a random integer between two values, inclusive =", Math.floor(Math.random() * (max - min + 1) + min));
// The maximum is inclusive and the minimum is inclusive
 

====================================
Logical OR operator :-
let logicalOr = false || 89;
ans => 89

If the LHS is null, undefined, false then RHS is used
------------------------
nullish coalescing (??) operator
let nullishCoalescing = false ?? 56;

ans => false
If the LHS is null, undefined then RHS is used

===================================
Spread operator -> 

...arr returns an unpacked array. In other words, it spreads the array. However, the spread operator only works in-place, like in an argument to a function or in an array literal. The 
following code will not work:

=====================================
OOP

// Explicit constructor
class SpaceShuttle {
  constructor(targetPlanet) {
    this.targetPlanet = targetPlanet;
  }
  takeOff() {
    console.log("To " + this.targetPlanet + "!");
  }
}

// Implicit constructor 
class Rocket {
  launch() {
    console.log("To the moon!");
  }
}

const zeus = new SpaceShuttle('Jupiter');
// prints To Jupiter! in console
zeus.takeOff();

const atlas = new Rocket();
// prints To the moon! in console
atlas.launch();
It should be noted that the class keyword declares a new function, to which a constructor is added. This constructor is invoked when new is called to create a new object.

========================================
Celsius  -> Fahrenheit and Fahrenheit -> Celsius formulas
Remember that C = 5/9 * (F - 32) and F = C * 9.0 / 5 + 32, where F is the value of temperature in Fahrenheit, and C is the value of the same temperature in Celsius.
====================================
Most of the JavaScript you've learned up to this point was in ES5 (ECMAScript 5), which was finalized in 2009. While you can still write programs in ES5, JavaScript is constantly evolving, and new features are released every year.

ES6, released in 2015, added many powerful new features to the language. In this course, you'll learn these new features, including arrow functions, destructuring, classes, promises, and modules.

Promise
-------------------------------------------------------------
A promise in JavaScript is exactly what it sounds like - you use it to make a promise to do something, usually asynchronously. When the task completes, you either fulfill your promise or fail to do so.

A promise has three states: pending, fulfilled, and rejected. The promise you created in the last challenge is forever stuck in the pending state because you did not add a way to complete the promise. The resolve and reject parameters given to the promise argument are used to do this. resolve is used when you want your promise to succeed, and reject is used when you want it to fail. 

Arrays
-------------------------------------------------------------
arrays are mutable
push() method adds elements to the end of an array, and unshift() adds elements to the beginning.

splice() allows us to do just that: remove any number of consecutive elements from anywhere in an array.

Object Oriented Javascript
-------------------------------------------------------------
Constructors are functions that create new objects.

Constructors are defined with a capitalized name to distinguish them from other functions that are not constructors.
Constructors use the keyword this to set properties of the object they will create. Inside the constructor, this refers to the new object it will create.
Constructors define properties and behaviors instead of returning a value as other functions might.

Properties in the prototype are shared among ALL instances of Bird Object.Here's how to add numLegs to the Bird prototype:

Bird.prototype.numLegs = 2;
Now all instances of Bird have the numLegs property.

Just like people inherit genes from their parents, an object inherits its prototype directly from the constructor function that created it.

Prototype 
-------------------------------------------------------------
function Bird(name) {
  this.name = name;
}

let duck = new Bird("Donald");
duck inherits its prototype from the Bird constructor function. You can show this relationship with the isPrototypeOf method:

Bird.prototype.isPrototypeOf(duck);

All objects in JavaScript (with a few exceptions) have a prototype. Also, an object’s prototype itself is an object.

let duck = new Bird("Donald");
duck.hasOwnProperty("name");
The hasOwnProperty method is defined in Object.prototype, which can be accessed by Bird.prototype, which can then be accessed by duck. This is an example of the prototype chain. In this prototype chain, Bird is the supertype for duck, while duck is the subtype. Object is a supertype for both Bird and duck. Object is a supertype for all objects in JavaScript. Therefore, any object can use the hasOwnProperty method.

Inhetitance
-------------------------------------------------------------
Bird.prototype = Object.create(Animal.prototype);

When an object inherits its prototype from another object, it also inherits the supertype's constructor property.


Example of Inheritance :-

function Animal() { }
Animal.prototype.eat = function() {
  console.log("nom nom nom");
};
function Bird() { }
Bird.prototype = Object.create(Animal.prototype);
Bird.prototype.constructor = Bird;

-------------------------------------------------------------
Override menthods
Override Inherited Methods
In previous lessons, you learned that an object can inherit its behavior (methods) from another object by referencing its prototype object:

ChildObject.prototype = Object.create(ParentObject.prototype);
Then the ChildObject received its own methods by chaining them onto its prototype:

ChildObject.prototype.methodName = function() {...};
It's possible to override an inherited method. It's done the same way - by adding a method to ChildObject.prototype using the same method name as the one to override. Here's an example of Bird overriding the eat() method inherited from Animal:

function Animal() { }
Animal.prototype.eat = function() {
  return "nom nom nom";
};
function Bird() { }

Bird.prototype = Object.create(Animal.prototype);

Bird.prototype.eat = function() {
  return "peck peck peck";
};
If you have an instance let duck = new Bird(); and you call duck.eat(), this is how JavaScript looks for the method on the prototype chain of duck:

duck => Is eat() defined here? No.
Bird => Is eat() defined here? => Yes. Execute it and stop searching.
Animal => eat() is also defined, but JavaScript stopped searching before reaching this level.
Object => JavaScript stopped searching before reaching this level.
-------------------------------------------------------------

Mixins

A mixin allows other objects to use a collection of functions.

let flyMixin = function(obj) {
  obj.fly = function() {
    console.log("Flying, wooosh!");
  }
};

-------------------------------------------------------------

Example of closure :-

function Bird() {
  let hatchedEgg = 10;

  this.getHatchedEggCount = function() { 
    return hatchedEgg;
  };
}
let ducky = new Bird();
ducky.getHatchedEggCount();
Here getHatchedEggCount is a privileged method, because it has access to the private variable hatchedEgg. 
This is possible because hatchedEgg is declared in the same context as getHatchedEggCount. 
In JavaScript, a function always has access to the context in which it was created. 
This is called closure.

A closure is the combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment). 
In other words, a closure gives you access to an outer function's scope from an inner function.
-------------------------------------------------------------
Immediately Invoked Function Expression

An immediately invoked function expression (IIFE) is often used to group related functionality into a single object or module. For example, an earlier challenge defined two mixins:

--------------------------------------------------------------
TypeScript

3. What is any type, and when to use it?
There are times when you want to store a value in a variable but don’t know the type of that variable in advance. For example, the value is coming from an API call or the user input. The ‘any’ type allows you to assign a value of any type to the variable of type any.

4. What is void, and when to use the void type?

The void indicates the absence of type on a variable. It acts as the opposite type to any. It is especially useful in functions that don’t return a value.

function notify(): void {
  alert("The user has been notified.");
}
If a variable is of type void, you can only assign the null or undefined values to that variable. 


5. What is an unknown type, and when to use it in TypeScript?

The unknown type is the type-safe counterpart of any type. You can assign anything to the unknown, but the unknown isn’t assignable to anything but itself and any, without performing a type assertion of a control-flow-based narrowing. You cannot perform any operations on a variable of an unknown type without first asserting or narrowing it to a more specific type.

Consider the following example. We create the foo variable of unknown type and assign a string value to it. If we try to assign that unknown variable to a string variable bar, the compiler gives an error.

let foo: unknown = "Akshay";
let bar: string = foo; // Type 'unknown' is not assignable to type 'string'.(2322)
You can narrow down a variable of an unknown type to something specific by doing typeof checks or comparison checks or using type guards. For example, we can get rid of the above error by

let foo: unknown = "Akshay";
let bar: string = foo as string;

--------------------------------------------------------------

Functional Programming

One of the core principles of functional programming is to not change things.

Recall that in functional programming, changing or altering things is called mutation, and the outcome is called a side effect. A function, ideally, should be a pure function, meaning that it does not cause any side effects.

Pure function do not cause any side effects

--------------------------------------------------------------
Javascript Sort Fucntion :-

Therefore, it is encouraged to provide a callback function to specify how to sort the array items. When such a callback function, normally called compareFunction, is supplied, the array elements are sorted according to the return value of the compareFunction: If compareFunction(a,b) returns a value less than 0 for two elements a and b, then a will come before b. If compareFunction(a,b) returns a value greater than 0 for two elements a and b, then b will come before a. If compareFunction(a,b) returns a value equal to 0 for two elements a and b, then a and b will remain unchanged.

--------------------------------------------------------------
Currying :- 

The arity of a function is the number of arguments it requires. Currying a function means to convert a function of N arity into N functions of arity 1.

--------------------------------------------------------------
Partial Applicatrion :-

Similarly, partial application can be described as applying a few arguments to a function at a time and returning another function that is applied to more arguments. Here's an example:

function impartial(x, y, z) {
  return x + y + z;
}

const partialFn = impartial.bind(this, 1, 2);
partialFn(10); // 13

--------------------------------------------------------------
Regular Expression :-

Regular expressions are used in programming languages to match parts of strings.

OR operator in regular expression :-
You can also search for more than just two patterns. 
You can do this by adding more patterns with more OR operators separating them, like /yes|no|maybe/.

Ignore Case While Matching :-
There are other flags but here you'll focus on the flag that ignores case - the i flag.
You can use it by appending it to the regex. An example of using this flag is /ignorecase/i. 
This regex can match the strings ignorecase, igNoreCase, and IgnoreCase.

Match method :-
"Hello, World!".match(/Hello/);
let ourStr = "Regular expressions";
let ourRegex = /expressions/;
ourStr.match(ourRegex);
Here the first match would return ["Hello"] and the second would return ["expressions"].

Note that the .match syntax is the "opposite" of the .test method you have been using thus far:

'string'.match(/regex/);
/regex/.test('string');

It resutns null if string is not having word matching to regular expresison

Find More Than the First Match :-
To search or extract a pattern more than once, you can use the global search flag: g.

let repeatRegex = /Repeat/g;
testStr.match(repeatRegex);
And here match returns the value ["Repeat", "Repeat", "Repeat"]

Dot/Period/Wildcard Character :-

The wildcard character . will match any one character. The wildcard is also called dot and period. 
You can use the wildcard character just like any other character in the regex. 
For example, if you wanted to match hug, huh, hut, and hum, you can use the regex /hu./ to match all four words.

let humStr = "I'll hum a song";
let hugStr = "Bear hug";
let huRegex = /hu./;
huRegex.test(humStr);
huRegex.test(hugStr);
Both of these test calls would return true.

Match Starting String Patterns:-

In an earlier challenge, you used the caret character (^) inside a character set to create a negated character set in the form [^thingsThatWillNotBeMatched]. 
Outside of a character set, the caret is used to search for patterns at the beginning of strings.

let firstString = "Ricky is first and can be found.";
 let firstRegex = /^Ricky/;
 firstRegex.test(firstString);
 let notFirst = "You can't find Ricky now.";
 firstRegex.test(notFirst);
 The first test call would return true, while the second would return false.

Match Ending String Patterns :-

You can search the end of strings using the dollar sign character $ at the end of the regex.

let theEnding = "This is a never ending story";
let storyRegex = /story$/;
storyRegex.test(theEnding);
let noEnding = "Sometimes a story will have to end";
storyRegex.test(noEnding);
The first test call would return true, while the second would return false.


Match Numbers & alphabets  :- (small w)
\w	
Matches any alphanumeric character from the basic Latin alphabet, including the underscore. 
Equivalent to [A-Za-z0-9_]. 
For example, /\w/ matches "a" in "apple", "5" in "$5.28", "3" in "3D" and "m" in "Émanuel".

Do Not Match Numbers & alphabets  :- (capital W)
\W	
Matches any character that is not a word character from the basic Latin alphabet. 
Equivalent to [^A-Za-z0-9_]. 
For example, /\W/ or /[^A-Za-z0-9_]/ matches "%" in "50%" and "É" in "Émanuel".

Match numbers :- (small d)
\d
The shortcut to look for digit characters is \d, with a lowercase d. 
This is equal to the character class [0-9], which looks for a single character of any number between zero and nine.


Do Not match Numbers :- (capital D)
The shortcut to look for non-digit characters is \D. 
This is equal to the character class [^0-9], which looks for a single character that is not a number between zero and nine.

Match Whitespace :- \s (small s)
You can search for whitespace using \s, which is a lowercase s. 
This pattern not only matches whitespace, but also carriage return, tab, form feed, and new line characters. 
You can think of it as similar to the character class [ \r\t\f\n\v].)

Match Non-Whitespace Characters :- (Capital S)
Search for non-whitespace using \S, which is an uppercase s. 
This pattern will not match whitespace, carriage return, tab, form feed, and new line characters. 
You can think of it being similar to the character class [^ \r\t\f\n\v].

Specify Upper and Lower Number of Matches :-
You can specify the lower and upper number of patterns with quantity specifiers. Quantity specifiers are used with curly brackets ({ and }). You put two numbers between the curly brackets - for the lower and upper number of patterns.

For example, to match only the letter a appearing between 3 and 5 times in the string ah, your regex would be /a{3,5}h/.

let A4 = "aaaah";
let A2 = "aah";
let multipleA = /a{3,5}h/;
multipleA.test(A4);
multipleA.test(A2);
The first test call would return true, while the second would return false.

Optional character :- ?
let american = "color";
let british = "colour";
let rainbowRegex= /colou?r/;
rainbowRegex.test(american);
rainbowRegex.test(british);
Both uses of the test method would return true.
--------------------------------------------------------------
arguments object in Javascript :-
The arguments is an object which is local to a function. 
You can think of it as a local variable that is available with all functions by default except arrow functions in JavaScript. 

This object (arguments) is used to access the parameter passed to a function. 
It is only available within a function. We can’t access it outside the function.
Arguments object allow you to access all of the arguments that are passed to a function. 
We can access these arguments using indexes.

Javascript Primitive Data Types :-
JavaScript recognizes seven primitive (immutable) data types: Boolean, Null, Undefined, Number, String, Symbol (new with ES6), and BigInt (new with ES2020), 
and one type for mutable items: Object. Note that in JavaScript, arrays are technically a type of object.

--------------------------------------------------------------
Falsy Values :-
Almost every value on its own in JavaScript evaluates to true, except what are known as the "falsy" values: 
false, 0, "" (an empty string), NaN, undefined, and null.

--------------------------------------------------------------
method to ftatten the arrayfunction getArrayElements(arr) {
    return arr.reduce((resultArray, element) => {
      return resultArray.concat(Array.isArray(element) ? getArrayElements(element) : element);
    }, []);
}

input :- [1, [2, [5], [[6]]], [3, [[4]]]]
output :-  [1, 2, 5, 6, 3, 4]

--------------------------------------------------------------
JavaScript -> Explain how 'this' keyword works in JavaScript

If the new keyword is used when calling the function, this inside the function is a brand new object.
If apply, call, or bind are used to call/create a function, this inside the function is the object that is passed in as the argument.
If a function is called as a method, such as obj.method() — this is the object that the function is a property of.
If a function is invoked as a free function invocation, meaning it was invoked without any of the conditions present above, this is the global object. In a browser, it is the window object. If in strict mode ('use strict'), this will be undefined instead of the global object.
If multiple of the above rules apply, the rule that is higher wins and will set the this value.
If the function is an ES2015 arrow function, it ignores all the rules above and receives the this value of its surrounding scope at the time it is created.

--------------------------------------------------------------
JavaScript -> call, apply, bind

call: binds the this value, invokes the function, and allows you to pass a list of arguments.

function test(arg1, arg2){
  console.log(this.num, arg1, arg2); // 100, 10, 20
}

test.call({num: 100}, 10, 20);

---------------------------------
apply: binds the this value, invokes the function, and allows you to pass arguments as an array.

function test(...arguments){
  console.log(this.num, arguments);//100, [1,2,3]
}

test.apply({num: 100}, [1,2,3]); 
---------------------------------
bind: binds the this value, returns a new function, and allows you to pass in a list of arguments.

function test(arg){
 console.log(this.number, arg);
}

let bindedFn = test.bind({number: 99}, "argument");

bindedFn(); // 99, "argument"

--------------------------------------------------------------
'this' keyword inside arrow functions 

"use strict";

const obj = {
  i: 10,
  b: () => console.log(this.i, this),
  c() {
    console.log(this.i, this);
  },
};

obj.b(); // logs undefined, Window { /* … */ } (or the global object)
obj.c(); // logs 10, Object { /* … */ }

--------------------------------------------------------------
Event bubbling & capturing :-

Event bubbling and capturing are two ways of event propagation in the HTML DOM API, 
when an event occurs in an element inside another element, and both elements have registered a handle for that event. 
The event propagation mode determines in which order the elements receive the event.

With bubbling, the event is first captured and handled by the innermost element and then propagated to outer elements.

With capturing, the event is first captured by the outermost element and propagated to the inner elements.

--------------------------------------------------------------
Recurrsion & Execution stack :-

The execution context and stack
Now let’s examine how recursive calls work. For that we’ll look under the hood of functions.

The information about the process of execution of a running function is stored in its execution context.

The execution context is an internal data structure that contains details about the execution of a function: where the control flow is now, the current variables, the value of this (we don’t use it here) and few other internal details.

One function call has exactly one execution context associated with it.

When a function makes a nested call, the following happens:

The current function is paused.
The execution context associated with it is remembered in a special data structure called execution context stack.
The nested call executes.
After it ends, the old execution context is retrieved from the stack, and the outer function is resumed from where it stopped.
Let’s see what happens during the pow(2, 3) call.

--------------------------------------------------------------

Explain how prototypal inheritance works
This is an extremely common JavaScript interview question. 
All JavaScript objects have a __proto__ property with the exception of objects created with Object.create(null), that is a reference to another object, which is called the object's "prototype". 
When a property is accessed on an object and if the property is not found on that object, the JavaScript engine looks at the object's __proto__, and the __proto__'s __proto__ and so on, 
until it finds the property defined on one of the __proto__s or until it reaches the end of the prototype chain. 
This behavior simulates classical inheritance, but it is really more of delegation than inheritance.

Child.prototype = Object.create(Parent.prototype)
Child.prototype.constuctor = Child;

--------------------------------------------------------------
Interview question about ES5 constructor :-

Difference between: function Person(){}, var person = Person(), and var person = new Person()?
This question is pretty vague. My best guess at its intention is that it is asking about constructors in JavaScript. 

Technically speaking, function Person(){} is just a normal function declaration. 
The convention is to use PascalCase for functions that are intended to be used as constructors.

var person = Person() invokes the Person as a function, and not as a constructor. 
Invoking as such is a common mistake if the function is intended to be used as a constructor. 
Typically, the constructor does not return anything, hence invoking the constructor like a normal function will return undefined and that gets assigned to the variable intended as the instance.

var person = new Person() creates an instance of the Person object using the new operator, which inherits from Person.prototype. 
An alternative would be to use Object.create, such as: Object.create(Person.prototype).

function Person(name) {
  this.name = name;
}

var person = Person('John');
console.log(person); // undefined
console.log(person.name); // Uncaught TypeError: Cannot read property 'name' of undefined

var person = new Person('John');
console.log(person); // Person { name: "John" }
console.log(person.name); // "john"