(function(){
  var a = b = 3;
})();

console.log("a defined? " + (typeof a !== 'undefined'));
console.log("b defined? " + (typeof b !== 'undefined'));

Answer :---
a defined? false
b defined? true

-----------------------------------------
var a={},
    b={key:'b'},
    c={key:'c'};

a[b]=123;
a[c]=456;

console.log(a[b]);

Answer:-
The output of this code will be 456 (not 123).

The reason for this is as follows: When setting an object property, JavaScript will implicitly stringify the parameter value. In this case, since b and c are both objects, they will both be converted to "[object Object]". 
As a result, a[b] anda[c] are both equivalent to a["[object Object]"] and can be used interchangeably. 
Therefore, setting or referencing a[c] is precisely the same as setting or referencing a[b].

---------------------------------------------------------

(function(x) {
    return (function(y) {
        console.log(x);
    })(2)
})(1);

Answer:-
The output will be 1, even though the value of x is never set in the inner function. Here’s why:

As explained in our JavaScript Hiring Guide, a closure is a function, along with all variables or functions that were in-scope at the time that the closure was created. 

In JavaScript, a closure is implemented as an “inner function”; i.e., a function defined within the body of another function. An important feature of closures is that an inner function still has access to the outer function’s variables.

Therefore, in this example, since x is not defined in the inner function, the scope of the outer function is searched for a defined variable x, which is found to have a value of 1.
----------------------------------------------------------

var myObject = {
    foo: "bar",
    func: function() {
        var self = this;
        console.log("outer func:  this.foo = " + this.foo);
        console.log("outer func:  self.foo = " + self.foo);
        (function() {
            console.log("inner func:  this.foo = " + this.foo);
            console.log("inner func:  self.foo = " + self.foo);
        }());
    }
};
myObject.func();

Answer:-
outer func:  this.foo = bar
outer func:  self.foo = bar
inner func:  this.foo = undefined
inner func:  self.foo = bar

---------------------------------------------------------
(function() {
    console.log(1); 
    setTimeout(function(){console.log(2)}, 1000); 
    setTimeout(function(){console.log(3)}, 0); 
    console.log(4);
})();

Answer:-
1
4
3
2
---------------------------------------------------------
(function () {
    try {
        throw new Error();
    } catch (x) {
        var x = 1, y = 2;
        console.log(x);
    }
    console.log(x);
    console.log(y);
})();

Answer:-
1
undefined
2

Expaination:-
var statements are hoisted (without their value initialization) to the top of the global or function scope it belongs to, even when it’s inside a with or catch block.
However, the error’s identifier is only visible inside the catch block. It is equivalent to:

(function () {
    var x, y; // outer and hoisted
    try {
        throw new Error();
    } catch (x /* inner */) {
        x = 1; // inner x, not the outer one
        y = 2; // there is only one y, which is in the outer scope
        console.log(x /* inner */);
    }
    console.log(x);
    console.log(y);
})();

----------------------------------------------------------
function foo1()
{
  return {
      bar: "hello"
  };
}

function foo2()
{
  return
  {
      bar: "hello"
  };
}

Surprisingly, these two functions will not return the same thing. Rather:

console.log("foo1 returns:");
console.log(foo1());
console.log("foo2 returns:");
console.log(foo2());
will yield:

foo1 returns:
Object {bar: "hello"}
foo2 returns:
undefined 
Not only is this surprising, but what makes this particularly gnarly is that foo2() returns undefined without any error being thrown.

The reason for this has to do with the fact that semicolons are technically optional in JavaScript (although omitting them is generally really bad form). 

As a result, when the line containing the return statement (with nothing else on the line) is encountered in foo2(), a semicolon is automatically inserted immediately after the return statement.

No error is thrown since the remainder of the code is perfectly valid, even though it doesn’t ever get invoked or do anything (it is simply an unused code block that defines a property bar which is equal to the string "hello").

This behavior also argues for following the convention of placing an opening curly brace at the end of a line in JavaScript, rather than on the beginning of a new line. As shown here, this becomes more than just a stylistic preference in JavaScript.

-------------------------------------------------

function abc() {
  var x = 10;

  function pqr() {
    console.log(x);
    var x = 20;
  }
  pqr();

}
abc();

Answer:-
undefined 
Because x is again redeclared inside pqr()

--------------------------------------------------
function abc() {
  var x = 10;

  function pqr() {
    console.log(x);
    x = 20;
  }
  pqr();

}
abc();

Answer:-
10
Because pqr() is accessing abc() funciton's x variable

--------------------------------------------------------

<button onclick="timedText()">Display timed text</button>
<input type="text" id="txt">

<script>
function timedText() {
  var x = document.getElementById("txt");
  setTimeout(function(){ x.value="2 seconds" }, 2000);
  setTimeout(function(){ x.value="4 seconds" }, 4000);
  setTimeout(function(){ x.value="6 seconds" }, 6000);
}
</script>

--------------------------------------------------------

var x = 21;
var girl = function () {
    console.log(x);
    var x = 20;
};
girl ();

Answer & Explaination:-
Neither 21, nor 20, the result is undefined

It’s because JavaScript initialization is not hoisted.

(Why doesn’t it show the global value of 21? The reason is that when the function is executed, it checks that there’s a local x variable present but doesn’t yet declare it, so it won’t look for global one.)

--------------------------------------------------------

var b = 1;
function outer(){
   	var b = 2
    function inner(){
        b++;
        var b = 3;
        console.log(b)
    }
    inner();
}
outer();

Answer & Explaination:-
Output to the console will be “3”.

There are three closures in the example, each with it’s own var b declaration. When a variable is invoked closures will be checked in order from local to global until an instance is found.
Since the inner closure has a b variable of its own, that is what will be output.

Furthermore, due to hoisting the code in inner will be interpreted as follows:

function inner () {
    var b; // b is undefined
    b++; // b is NaN
    b = 3; // b is 3
    console.log(b); // output "3"
}

--------------------------------------------------------

const shape = {
  radius: 10,
  diameter() {
    return this.radius * 2;
  },
  perimeter: () => 2 * Math.PI * this.radius,
};

console.log(shape.diameter());
console.log(shape.perimeter());

----------------------------------------------------

/*

An anagram is a word or sentence, which usually contains all the original letters exactly once, 
in order to arrange the letters of a different term or phrase. Some of the examples are given below:

1. evil = vile
2. a gentleman = elegant man
3. eleven plus two = twelve plus one


Check  the  given strings are anagram's of each other
var str1 = "listen";
var str2 = "silent";

*/

Answer & Explaination:-

var firstWord = "Mary";
var secondWord = "Army";

isAnagram(firstWord, secondWord); // true

function isAnagram(first, second) {
  // For case insensitivity, change both words to lowercase.
  var a = first.toLowerCase();
  var b = second.toLowerCase();

  // Sort the strings, and join the resulting array to a string. Compare the results
  a = a.split("").sort().join("");
  b = b.split("").sort().join("");

  return a === b;
}

----------------------------------------------------

const names1 = ['John', 'Doe'];
names.length = 0;
console.log(names1[1]);

-------------------------------------------------------
function foo() {
  let a = b = 0;
  a++;
  return a;
}
foo();
console.log("typeof a", typeof a); // => ???
console.log("typeof b", typeof b); // => ???

Answer & Explaination:-

typeof a > undefined , type of b is number, because we dint declare b inside the function, so its global and substains the value 0

-------------------------------------------------------

Write a sum method which will work properly when invoked using either syntax below.
console.log(sum(2,3));   // Outputs 5
console.log(sum(2)(3));  // Outputs 5

Answer & Explaination:-

There are (at least) two ways to do this:

METHOD 1

function sum(x) {
  if (arguments.length == 2) {
    return arguments[0] + arguments[1];
  } else {
    return function(y) { return x + y; };
  }
}
In JavaScript, functions provide access to an arguments object which provides access to the actual arguments passed to a function. This enables us to use the length property to determine at runtime the number of arguments passed to the function.

If two arguments are passed, we simply add them together and return.

Otherwise, we assume it was called in the form sum(2)(3), so we return an anonymous function that adds together the argument passed to sum() (in this case 2) and the argument passed to the anonymous function (in this case 3).

METHOD 2

function sum(x, y) {
  if (y !== undefined) {
    return x + y;
  } else {
    return function(y) { return x + y; };
  }
}
When a function is invoked, JavaScript does not require the number of arguments to match the number of arguments in the function definition. 
If the number of arguments passed exceeds the number of arguments in the function definition, the excess arguments will simply be ignored. 
On the other hand, if the number of arguments passed is less than the number of arguments in the function definition, the missing arguments will have a value of undefined when referenced within the function. 
So, in the above example, by simply checking if the 2nd argument is undefined, we can determine which way the function was invoked and proceed accordingly.

-------------------------------------------------------
Consider the following code snippet:

for (var i = 0; i < 5; i++) {
  var btn = document.createElement('button');
  btn.appendChild(document.createTextNode('Button ' + i));
  btn.addEventListener('click', function(){ console.log(i); });
  document.body.appendChild(btn);
}

(a) What gets logged to the console when the user clicks on “Button 4” and why?

(b) Provide one or more alternate implementations that will work as expected.

Answer & Explaination:-

(a) No matter what button the user clicks the number 5 will always be logged to the console. This is because, at the point that the onclick method is invoked (for any of the buttons), the for loop has already completed and the variable i already has a value of 5. (Bonus points for the interviewee if they know enough to talk about how execution contexts, variable objects, activation objects, and the internal “scope” property contribute to the closure behavior.)

(b) The key to making this work is to capture the value of i at each pass through the for loop by passing it into a newly created function object. Here are four possible ways to accomplish this:

for (var i = 0; i < 5; i++) {
  var btn = document.createElement('button');
  btn.appendChild(document.createTextNode('Button ' + i));
  btn.addEventListener('click', (function(i) {
    return function() { console.log(i); };
  })(i));
  document.body.appendChild(btn);
}
Alternatively, you could wrap the entire call to btn.addEventListener in the new anonymous function:

for (var i = 0; i < 5; i++) {
  var btn = document.createElement('button');
  btn.appendChild(document.createTextNode('Button ' + i));
  (function (i) {
    btn.addEventListener('click', function() { console.log(i); });
  })(i);
  document.body.appendChild(btn);
}
Or, we could replace the for loop with a call to the array object’s native forEach method:

['a', 'b', 'c', 'd', 'e'].forEach(function (value, i) {
  var btn = document.createElement('button');
  btn.appendChild(document.createTextNode('Button ' + i));
  btn.addEventListener('click', function() { console.log(i); });
  document.body.appendChild(btn);
});
Lastly, the simplest solution, if you’re in an ES6/ES2015 context, is to use let i instead of var i:

for (let i = 0; i < 5; i++) {
  var btn = document.createElement('button');
  btn.appendChild(document.createTextNode('Button ' + i));
  btn.addEventListener('click', function(){ console.log(i); });
  document.body.appendChild(btn);
}

-------------------------------------------------------

Write a program for factorial

Answer & Explaination:-

console.log((function f(n){return ((n > 1) ? n * f(n-1) : n)})(10));

The code will output the value of 10 factorial (i.e., 10!, or 3,628,800).

Here’s why:

The named function f() calls itself recursively, until it gets down to calling f(1) which simply returns 1. Here, therefore, is what this does:

f(1): returns n, which is 1
f(2): returns 2 * f(1), which is 2
f(3): returns 3 * f(2), which is 6
f(4): returns 4 * f(3), which is 24
f(5): returns 5 * f(4), which is 120
f(6): returns 6 * f(5), which is 720
f(7): returns 7 * f(6), which is 5040
f(8): returns 8 * f(7), which is 40320
f(9): returns 9 * f(8), which is 362880
f(10): returns 10 * f(9), which is 3628800

-------------------------------------------------------
What do the following lines output, and why?

console.log(1 < 2 < 3);
console.log(3 > 2 > 1);

Answer & Explaination:-

The first statement returns true which is as expected.

The second returns false because of how the engine works regarding operator associativity for < and >.
It compares left to right, so 3 > 2 > 1 JavaScript translates to true > 1. true has value 1, so it then compares 1 > 1, which is false.


-------------------------------------------------------
Timeout :-

// What will happen and why
// Fix it
const arr = [10, 12, 15, 21];
for (var i = 0; i < arr.length; i++) {
  setTimeout(function() {
    console.log('Index: ' + i + ', element: ' + arr[i]);
  }, 3000);
}
Output :-

-------------------------------------------------------
Remove duplicates of an array and return an array of only unique elements
var array = [1, 2, 3, 5, 1, 5, 9, 1, 2, 8];


// ES6 Implementation
var array = [1, 2, 3, 5, 1, 5, 9, 1, 2, 8];

Array.from(new Set(array)); // [1, 2, 3, 5, 9, 8]

// ES5 Implementation1


var array = [1, 2, 3, 5, 1, 5, 9, 1, 2, 8];
let newArray = [];


for (let i = 0; i < array.length; i++) {
  if (newArray.indexOf(array[i]) === -1) {
    newArray.push(array[i]);
  }
}
console.log(newArray);


// ES5 Implementation2
var array = [1, 2, 3, 5, 1, 5, 9, 1, 2, 8];

uniqueArray(array); // [1, 2, 3, 5, 9, 8]

function uniqueArray(array) {
  var hashmap = {};
  var unique = [];

  for(var i = 0; i < array.length; i++) {
    // If key returns undefined (unique), it is evaluated as false.
    if(!hashmap.hasOwnProperty(array[i])) {
      hashmap[array[i]] = 1;
      unique.push(array[i]);
    }
  }

  return unique;
}

-------------------------------------------------------
Given an array of integers, find the largest product yielded from three of the integers

var unsortedArray = [-10, 7, 29, 30, 5, -10, -70];

computeProduct(unsortedArray); // 21000

function sortIntegers(a, b) {
   return a - b;
}

// Greatest product is either (min1 * min2 * max1 || max1 * max2 * max3)
function computeProduct(unsorted) {
   var sortedArray = unsorted.sort(sortIntegers),
       product1 = 1,
       product2 = 1,
       array_n_element = sortedArray.length - 1;

   // Get the product of three largest integers in sorted array
   for (var x = array_n_element; x > array_n_element - 3; x--) {
       product1 = product1 * sortedArray[x];
   }

   product2 = sortedArray[0] * sortedArray[1] * sortedArray[array_n_element];

   if (product1 > product2) return product1;

   return product2;
}




---------------------------------------------------------
https://jsfiddle.net/pfsduLk2/


Anagram finder : https://jsfiddle.net/wegj60vo/ OR https://jsfiddle.net/nehawalimbe/t92fow86/1/
timeout : https://jsfiddle.net/sgw87ny1/ OR https://jsfiddle.net/nehawalimbe/dwmn7kcj/1/
dom manipulation : https://jsfiddle.net/xtbf08k4/ OR https://jsfiddle.net/nehawalimbe/7ufxwno4/2/
capitalize prototype : https://jsfiddle.net/9muvskzh/1/ OR https://jsfiddle.net/nehawalimbe/o6cafrnt/1/
Object Parsing : https://jsfiddle.net/q3n7tdeg/ OR https://jsfiddle.net/nehawalimbe/6o5Lh1ns/4/

--------------------------------------------------------

For Refer a friend: Use the following details :
Senior Applications Developer
Reference: 146473  or  146470 or  146471
Job Code/Level: 10730/IC3

-------------------------------------------------------

TODO Neha 
--------------------------------------------------------
What is mean by Pollyfill ?

Exercises by Nap :-

Exercise #1: https://codepen.io/njncalub/pen/RwMVBRq
Exercise #2: https://codepen.io/njncalub/pen/jOzmpVb
Exercise #3: https://codepen.io/njncalub/pen/xxWdJgp
Exercise #4: https://codepen.io/njncalub/pen/gOeWjRJ